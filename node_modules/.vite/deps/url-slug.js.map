{
  "version": 3,
  "sources": ["../../url-slug/lib/index.js"],
  "sourcesContent": ["const LOWERCASE_TRANSFORMER = function (fragments, separator) {\n  return fragments.join(separator).toLowerCase()\n};\n\nconst SENTENCECASE_TRANSFORMER = function (fragments, separator) {\n  const sentence = fragments.join(separator);\n  return sentence.charAt(0).toUpperCase() + sentence.slice(1).toLowerCase()\n};\n\nconst TITLECASE_TRANSFORMER = function (fragments, separator) {\n  const buffer = [];\n  for (let index = 0; index < fragments.length; index++) {\n    buffer.push(\n      fragments[index].charAt(0).toUpperCase() +\n      fragments[index].slice(1).toLowerCase()\n    );\n  }\n  return buffer.join(separator)\n};\n\nconst UPPERCASE_TRANSFORMER = function (fragments, separator) {\n  return fragments.join(separator).toUpperCase()\n};\n\nconst INVALID_SEPARATOR = /[^-._~!$&'()*+,;=]/;\n\nconst CAMELCASE_REGEXP_PATTERN = '(?:[a-z](?=[A-Z])|[A-Z](?=[A-Z][a-z]))';\n\nfunction validate (options, extra) {\n  const camelCase = options.camelCase;\n\n  if (camelCase !== undefined && typeof camelCase !== 'boolean') {\n    throw new Error('camelCase must be a boolean: \"' + camelCase + '\".')\n  }\n\n  const separator = options.separator;\n  extra = extra || {};\n\n  if (\n    separator !== undefined &&\n    !('separator' in extra && separator === extra.separator)\n  ) {\n    if (typeof separator !== 'string') {\n      throw new Error(\n        'separator must be a string' +\n        ('separator' in extra ? ' or ' + extra.separator : '') + ': \"' +\n        separator + '\".'\n      )\n    } else if (INVALID_SEPARATOR.test(separator)) {\n      throw new Error(\n        'separator has an invalid character: \"' +\n        separator.match(INVALID_SEPARATOR)[0] + '\".'\n      )\n    }\n  }\n\n  const transformer = options.transformer;\n\n  if (\n    transformer !== undefined &&\n    transformer !== false &&\n    typeof transformer !== 'function'\n  ) {\n    throw new Error(\n      'transformer must be false or a function: \"' +\n      transformer + '\".'\n    )\n  }\n}\n\nfunction replace (string, definitions) {\n  for (let index = 0, length = string.length; index < length; index++) {\n    const char = string[index];\n    const replacement = definitions[char];\n\n    if (replacement !== undefined) {\n      string = string.substr(0, index) +\n        replacement +\n        string.substr(index + 1);\n\n      const addedCharsCount = String(replacement).length - 1;\n\n      index += addedCharsCount;\n      length += addedCharsCount;\n    }\n  }\n\n  return string\n}\n\n// eslint-disable-next-line no-misleading-character-class\nconst COMBINING_CHARS = /[\\u0300-\\u036F\\u1AB0-\\u1AFF\\u1DC0-\\u1DFF]+/g;\n\nconst CONVERT = /[A-Za-z\\d]+/g;\n\nconst CONVERT_CAMELCASE = new RegExp(\n  '[A-Za-z\\\\d]*?' + CAMELCASE_REGEXP_PATTERN + '|[A-Za-z\\\\d]+',\n  'g'\n);\n\nfunction convert (string, options) {\n  options = options || {};\n\n  if (process.env.NODE_ENV !== 'production') {\n    validate(options);\n  }\n\n  const camelCase = options.camelCase !== undefined\n    ? options.camelCase\n    : true;\n\n  const separator = options.separator !== undefined\n    ? options.separator\n    : '-';\n\n  const transformer = options.transformer !== undefined\n    ? options.transformer\n    : LOWERCASE_TRANSFORMER;\n\n  const fragments = (\n    options.dictionary\n      ? replace(String(string), options.dictionary)\n      : String(string)\n  )\n    .normalize('NFKD')\n    .replace(COMBINING_CHARS, '')\n    .match(camelCase ? CONVERT_CAMELCASE : CONVERT);\n\n  if (!fragments) {\n    return ''\n  }\n\n  return transformer\n    ? transformer(fragments, separator)\n    : fragments.join(separator)\n}\n\nconst REVERT = /[^-._~!$&'()*+,;=]+/g;\n\nconst REVERT_CAMELCASE = new RegExp(\n  '[^-._~!$&\\'()*+,;=]*?' + CAMELCASE_REGEXP_PATTERN + '|[^-._~!$&\\'()*+,;=]+',\n  'g'\n);\n\nconst REVERT_CAMELCASE_ONLY = new RegExp(\n  '.*?' + CAMELCASE_REGEXP_PATTERN + '|.+',\n  'g'\n);\n\nfunction revert (slug, options) {\n  options = options || {};\n\n  if (process.env.NODE_ENV !== 'production') {\n    validate(options, { separator: null });\n  }\n\n  const camelCase = options.camelCase !== undefined\n    ? options.camelCase\n    : false;\n\n  const separator = options.separator;\n\n  const transformer = options.transformer !== undefined\n    ? options.transformer\n    : false;\n\n  let fragments;\n  slug = String(slug);\n\n  /* Determine which method will be used split the slug */\n\n  if (separator === '') {\n    fragments = camelCase ? slug.match(REVERT_CAMELCASE_ONLY) : [String(slug)];\n  } else if (typeof separator === 'string') {\n    fragments = slug.split(separator);\n  } else {\n    fragments = slug.match(camelCase ? REVERT_CAMELCASE : REVERT);\n  }\n\n  if (!fragments) {\n    return ''\n  }\n\n  return transformer ? transformer(fragments, ' ') : fragments.join(' ')\n}\n\nexport { LOWERCASE_TRANSFORMER, SENTENCECASE_TRANSFORMER, TITLECASE_TRANSFORMER, UPPERCASE_TRANSFORMER, convert, convert as default, revert };\n"],
  "mappings": "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",
  "names": []
}

import "./chunk-AC2VUBZ6.js";

// node_modules/url-slug/lib/index.js
var LOWERCASE_TRANSFORMER = function(fragments, separator) {
  return fragments.join(separator).toLowerCase();
};
var SENTENCECASE_TRANSFORMER = function(fragments, separator) {
  const sentence = fragments.join(separator);
  return sentence.charAt(0).toUpperCase() + sentence.slice(1).toLowerCase();
};
var TITLECASE_TRANSFORMER = function(fragments, separator) {
  const buffer = [];
  for (let index = 0; index < fragments.length; index++) {
    buffer.push(
      fragments[index].charAt(0).toUpperCase() + fragments[index].slice(1).toLowerCase()
    );
  }
  return buffer.join(separator);
};
var UPPERCASE_TRANSFORMER = function(fragments, separator) {
  return fragments.join(separator).toUpperCase();
};
var INVALID_SEPARATOR = /[^-._~!$&'()*+,;=]/;
var CAMELCASE_REGEXP_PATTERN = "(?:[a-z](?=[A-Z])|[A-Z](?=[A-Z][a-z]))";
function validate(options, extra) {
  const camelCase = options.camelCase;
  if (camelCase !== void 0 && typeof camelCase !== "boolean") {
    throw new Error('camelCase must be a boolean: "' + camelCase + '".');
  }
  const separator = options.separator;
  extra = extra || {};
  if (separator !== void 0 && !("separator" in extra && separator === extra.separator)) {
    if (typeof separator !== "string") {
      throw new Error(
        "separator must be a string" + ("separator" in extra ? " or " + extra.separator : "") + ': "' + separator + '".'
      );
    } else if (INVALID_SEPARATOR.test(separator)) {
      throw new Error(
        'separator has an invalid character: "' + separator.match(INVALID_SEPARATOR)[0] + '".'
      );
    }
  }
  const transformer = options.transformer;
  if (transformer !== void 0 && transformer !== false && typeof transformer !== "function") {
    throw new Error(
      'transformer must be false or a function: "' + transformer + '".'
    );
  }
}
function replace(string, definitions) {
  for (let index = 0, length = string.length; index < length; index++) {
    const char = string[index];
    const replacement = definitions[char];
    if (replacement !== void 0) {
      string = string.substr(0, index) + replacement + string.substr(index + 1);
      const addedCharsCount = String(replacement).length - 1;
      index += addedCharsCount;
      length += addedCharsCount;
    }
  }
  return string;
}
var COMBINING_CHARS = /[\u0300-\u036F\u1AB0-\u1AFF\u1DC0-\u1DFF]+/g;
var CONVERT = /[A-Za-z\d]+/g;
var CONVERT_CAMELCASE = new RegExp(
  "[A-Za-z\\d]*?" + CAMELCASE_REGEXP_PATTERN + "|[A-Za-z\\d]+",
  "g"
);
function convert(string, options) {
  options = options || {};
  if (true) {
    validate(options);
  }
  const camelCase = options.camelCase !== void 0 ? options.camelCase : true;
  const separator = options.separator !== void 0 ? options.separator : "-";
  const transformer = options.transformer !== void 0 ? options.transformer : LOWERCASE_TRANSFORMER;
  const fragments = (options.dictionary ? replace(String(string), options.dictionary) : String(string)).normalize("NFKD").replace(COMBINING_CHARS, "").match(camelCase ? CONVERT_CAMELCASE : CONVERT);
  if (!fragments) {
    return "";
  }
  return transformer ? transformer(fragments, separator) : fragments.join(separator);
}
var REVERT = /[^-._~!$&'()*+,;=]+/g;
var REVERT_CAMELCASE = new RegExp(
  "[^-._~!$&'()*+,;=]*?" + CAMELCASE_REGEXP_PATTERN + "|[^-._~!$&'()*+,;=]+",
  "g"
);
var REVERT_CAMELCASE_ONLY = new RegExp(
  ".*?" + CAMELCASE_REGEXP_PATTERN + "|.+",
  "g"
);
function revert(slug, options) {
  options = options || {};
  if (true) {
    validate(options, { separator: null });
  }
  const camelCase = options.camelCase !== void 0 ? options.camelCase : false;
  const separator = options.separator;
  const transformer = options.transformer !== void 0 ? options.transformer : false;
  let fragments;
  slug = String(slug);
  if (separator === "") {
    fragments = camelCase ? slug.match(REVERT_CAMELCASE_ONLY) : [String(slug)];
  } else if (typeof separator === "string") {
    fragments = slug.split(separator);
  } else {
    fragments = slug.match(camelCase ? REVERT_CAMELCASE : REVERT);
  }
  if (!fragments) {
    return "";
  }
  return transformer ? transformer(fragments, " ") : fragments.join(" ");
}
export {
  LOWERCASE_TRANSFORMER,
  SENTENCECASE_TRANSFORMER,
  TITLECASE_TRANSFORMER,
  UPPERCASE_TRANSFORMER,
  convert,
  convert as default,
  revert
};
//# sourceMappingURL=url-slug.js.map

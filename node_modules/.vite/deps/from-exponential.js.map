{
  "version": 3,
  "sources": ["../../from-exponential/src/helpers.js", "../../from-exponential/src/index.js"],
  "sourcesContent": ["/**\n * Return two parts array of exponential number\n * @param {number|string|Array} num\n * @return {string[]}\n */\nexport function getExponentialParts(num) {\n    return Array.isArray(num) ? num : String(num).split(/[eE]/);\n}\n\n/**\n *\n * @param {number|string|Array} num - number or array of its parts\n */\nexport function isExponential(num) {\n    const eParts = getExponentialParts(num);\n    return !Number.isNaN(Number(eParts[1]));\n}\n", "import {getExponentialParts, isExponential} from './helpers';\n\n/**\n * Converts exponential notation to a human readable string\n * @param {number|string|Array} num - number or array of its parts\n * @return {string}\n */\nexport default function fromExponential(num) {\n    const eParts = getExponentialParts(num);\n    if (!isExponential(eParts)) {\n        return eParts[0];\n    }\n\n    const sign = eParts[0][0] === '-' ? '-' : '';\n    const digits = eParts[0].replace(/^-/, '');\n    const digitsParts = digits.split('.');\n    const wholeDigits = digitsParts[0];\n    const fractionDigits = digitsParts[1] || '';\n    let e = Number(eParts[1]);\n\n    if (e === 0) {\n        return `${sign + wholeDigits}.${fractionDigits}`;\n    } else if (e < 0) {\n        // move dot to the left\n        const countWholeAfterTransform = wholeDigits.length + e;\n        if (countWholeAfterTransform > 0) {\n            // transform whole to fraction\n            const wholeDigitsAfterTransform = wholeDigits.substr(0, countWholeAfterTransform);\n            const wholeDigitsTransformedToFraction = wholeDigits.substr(countWholeAfterTransform);\n            return `${sign + wholeDigitsAfterTransform}.${wholeDigitsTransformedToFraction}${fractionDigits}`;\n        } else {\n            // not enough whole digits: prepend with fractional zeros\n\n            // first e goes to dotted zero\n            let zeros = '0.';\n            e = countWholeAfterTransform;\n            while (e) {\n                zeros += '0';\n                e += 1;\n            }\n            return sign + zeros + wholeDigits + fractionDigits;\n        }\n    } else {\n        // move dot to the right\n        const countFractionAfterTransform = fractionDigits.length - e;\n        if (countFractionAfterTransform > 0) {\n            // transform fraction to whole\n            // countTransformedFractionToWhole = e\n            const fractionDigitsAfterTransform = fractionDigits.substr(e);\n            const fractionDigitsTransformedToWhole = fractionDigits.substr(0, e);\n            return `${sign + wholeDigits + fractionDigitsTransformedToWhole}.${fractionDigitsAfterTransform}`;\n        } else {\n            // not enough fractions: append whole zeros\n            let zerosCount = -countFractionAfterTransform;\n            let zeros = '';\n            while (zerosCount) {\n                zeros += '0';\n                zerosCount -= 1;\n            }\n            return sign + wholeDigits + fractionDigits + zeros;\n        }\n    }\n}\n"],
  "mappings": ";;;AAKO,SAAS,oBAAoB,KAAK;AACrC,SAAO,MAAM,QAAQ,GAAG,IAAI,MAAM,OAAO,GAAG,EAAE,MAAM,MAAM;AAC9D;AAMO,SAAS,cAAc,KAAK;AAC/B,QAAM,SAAS,oBAAoB,GAAG;AACtC,SAAO,CAAC,OAAO,MAAM,OAAO,OAAO,CAAC,CAAC,CAAC;AAC1C;;;ACTe,SAAR,gBAAiC,KAAK;AACzC,QAAM,SAAS,oBAAoB,GAAG;AACtC,MAAI,CAAC,cAAc,MAAM,GAAG;AACxB,WAAO,OAAO,CAAC;AAAA,EACnB;AAEA,QAAM,OAAO,OAAO,CAAC,EAAE,CAAC,MAAM,MAAM,MAAM;AAC1C,QAAM,SAAS,OAAO,CAAC,EAAE,QAAQ,MAAM,EAAE;AACzC,QAAM,cAAc,OAAO,MAAM,GAAG;AACpC,QAAM,cAAc,YAAY,CAAC;AACjC,QAAM,iBAAiB,YAAY,CAAC,KAAK;AACzC,MAAI,IAAI,OAAO,OAAO,CAAC,CAAC;AAExB,MAAI,MAAM,GAAG;AACT,WAAO,GAAG,OAAO,eAAe;AAAA,EACpC,WAAW,IAAI,GAAG;AAEd,UAAM,2BAA2B,YAAY,SAAS;AACtD,QAAI,2BAA2B,GAAG;AAE9B,YAAM,4BAA4B,YAAY,OAAO,GAAG,wBAAwB;AAChF,YAAM,mCAAmC,YAAY,OAAO,wBAAwB;AACpF,aAAO,GAAG,OAAO,6BAA6B,mCAAmC;AAAA,IACrF,OAAO;AAIH,UAAI,QAAQ;AACZ,UAAI;AACJ,aAAO,GAAG;AACN,iBAAS;AACT,aAAK;AAAA,MACT;AACA,aAAO,OAAO,QAAQ,cAAc;AAAA,IACxC;AAAA,EACJ,OAAO;AAEH,UAAM,8BAA8B,eAAe,SAAS;AAC5D,QAAI,8BAA8B,GAAG;AAGjC,YAAM,+BAA+B,eAAe,OAAO,CAAC;AAC5D,YAAM,mCAAmC,eAAe,OAAO,GAAG,CAAC;AACnE,aAAO,GAAG,OAAO,cAAc,oCAAoC;AAAA,IACvE,OAAO;AAEH,UAAI,aAAa,CAAC;AAClB,UAAI,QAAQ;AACZ,aAAO,YAAY;AACf,iBAAS;AACT,sBAAc;AAAA,MAClB;AACA,aAAO,OAAO,cAAc,iBAAiB;AAAA,IACjD;AAAA,EACJ;AACJ;",
  "names": []
}
